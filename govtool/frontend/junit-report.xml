<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="126" failures="0" errors="0" time="63720.103">
    <testsuite name="src/components/atoms/DrawerLink.test.tsx" timestamp="2024-08-30T09:05:02.901Z" hostname="MacBook-Pro-Micha.local" tests="5" failures="0" errors="0" skipped="0" time="0.121">
        <testcase classname="src/components/atoms/DrawerLink.test.tsx" name="DrawerLink &gt; renders correctly with mandatory props" time="0.061">
        </testcase>
        <testcase classname="src/components/atoms/DrawerLink.test.tsx" name="DrawerLink &gt; applies active styles correctly when active" time="0.02">
        </testcase>
        <testcase classname="src/components/atoms/DrawerLink.test.tsx" name="DrawerLink &gt; does not apply active styles when not active" time="0.018">
        </testcase>
        <testcase classname="src/components/atoms/DrawerLink.test.tsx" name="DrawerLink &gt; renders with an icon and activeIcon" time="0.003">
        </testcase>
        <testcase classname="src/components/atoms/DrawerLink.test.tsx" name="DrawerLink &gt; executes onClick callback when clicked" time="0.018">
        </testcase>
    </testsuite>
    <testsuite name="src/components/atoms/ActionRadio.test.tsx" timestamp="2024-08-30T09:05:02.901Z" hostname="MacBook-Pro-Micha.local" tests="4" failures="0" errors="0" skipped="0" time="0.305">
        <testcase classname="src/components/atoms/ActionRadio.test.tsx" name="ActionRadio &gt; should execute onChange with the correct value on click" time="0.023">
        </testcase>
        <testcase classname="src/components/atoms/ActionRadio.test.tsx" name="ActionRadio &gt; should change styles based on isChecked change" time="0.057">
        </testcase>
        <testcase classname="src/components/atoms/ActionRadio.test.tsx" name="ActionRadio &gt; should display correct title and optional subtitle" time="0.006">
        </testcase>
        <testcase classname="src/components/atoms/ActionRadio.test.tsx" name="ActionRadio &gt; should display tooltip text when InfoOutlinedIcon is hovered over" time="0.218">
        </testcase>
    </testsuite>
    <testsuite name="src/components/atoms/VotingPowerChips.test.tsx" timestamp="2024-08-30T09:05:02.901Z" hostname="MacBook-Pro-Micha.local" tests="3" failures="0" errors="0" skipped="0" time="0.288">
        <testcase classname="src/components/atoms/VotingPowerChips.test.tsx" name="VotingPowerChips &gt; renders loading spinner when data is loading" time="0.076">
        </testcase>
        <testcase classname="src/components/atoms/VotingPowerChips.test.tsx" name="VotingPowerChips &gt; displays formatted ADA amount when data is available and not loading" time="0.009">
        </testcase>
        <testcase classname="src/components/atoms/VotingPowerChips.test.tsx" name="VotingPowerChips &gt; displays the tooltip correctly for non-mobile DRep registered users" time="0.201">
        </testcase>
    </testsuite>
    <testsuite name="src/components/atoms/CopyButton.test.tsx" timestamp="2024-08-30T09:05:02.902Z" hostname="MacBook-Pro-Micha.local" tests="5" failures="0" errors="0" skipped="0" time="0.117">
        <testcase classname="src/components/atoms/CopyButton.test.tsx" name="CopyButton &gt; renders correctly with the default icon" time="0.037">
        </testcase>
        <testcase classname="src/components/atoms/CopyButton.test.tsx" name="CopyButton &gt; renders the blue icon when variant is &apos;blue&apos;" time="0.011">
        </testcase>
        <testcase classname="src/components/atoms/CopyButton.test.tsx" name="CopyButton &gt; renders the blue thin icon when variant is &apos;blueThin&apos;" time="0.012">
        </testcase>
        <testcase classname="src/components/atoms/CopyButton.test.tsx" name="CopyButton &gt; renders the white icon when isChecked prop is true" time="0.008">
        </testcase>
        <testcase classname="src/components/atoms/CopyButton.test.tsx" name="CopyButton &gt; copies text to clipboard and shows success alert on click" time="0.049">
        </testcase>
    </testsuite>
    <testsuite name="src/components/molecules/governanceActionCardElement.test.tsx" timestamp="2024-08-30T09:05:02.902Z" hostname="MacBook-Pro-Micha.local" tests="1" failures="0" errors="0" skipped="0" time="0.032">
        <testcase classname="src/components/molecules/governanceActionCardElement.test.tsx" name="GovernanceActionCardElement &gt; renders markdown content correctly" time="0.031">
        </testcase>
    </testsuite>
    <testsuite name="src/components/atoms/VotePill.test.tsx" timestamp="2024-08-30T09:05:02.902Z" hostname="MacBook-Pro-Micha.local" tests="5" failures="0" errors="0" skipped="0" time="0.133">
        <testcase classname="src/components/atoms/VotePill.test.tsx" name="VotePill &gt; renders the VotePill component with &quot;yes&quot; vote correctly" time="0.088">
        </testcase>
        <testcase classname="src/components/atoms/VotePill.test.tsx" name="VotePill &gt; renders the VotePill component with &quot;no&quot; vote correctly" time="0.015">
        </testcase>
        <testcase classname="src/components/atoms/VotePill.test.tsx" name="VotePill &gt; renders the VotePill component with &quot;abstain&quot; vote correctly" time="0.01">
        </testcase>
        <testcase classname="src/components/atoms/VotePill.test.tsx" name="VotePill &gt; handles custom width and maxWidth props correctly" time="0.008">
        </testcase>
        <testcase classname="src/components/atoms/VotePill.test.tsx" name="VotePill &gt; defaults width and maxWidth when not provided" time="0.011">
        </testcase>
    </testsuite>
    <testsuite name="src/context/governanceAction.test.tsx" timestamp="2024-08-30T09:05:02.903Z" hostname="MacBook-Pro-Micha.local" tests="3" failures="0" errors="0" skipped="0" time="0.024">
        <testcase classname="src/context/governanceAction.test.tsx" name="GovernanceActionProvider &gt; renders correctly" time="0.012">
        </testcase>
        <testcase classname="src/context/governanceAction.test.tsx" name="GovernanceActionProvider &gt; creates governance action JSON-LD" time="0.003">
        </testcase>
        <testcase classname="src/context/governanceAction.test.tsx" name="GovernanceActionProvider &gt; creates governance action jsonld and hash" time="0.005">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/isValidFormat.test.ts" timestamp="2024-08-30T09:05:02.903Z" hostname="MacBook-Pro-Micha.local" tests="16" failures="0" errors="0" skipped="0" time="0.009">
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidURLFormat &gt; returns true for valid HTTP URLs" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidURLFormat &gt; returns true for valid HTTPS URLs" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidURLFormat &gt; returns true for valid URL without protocol" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidURLFormat &gt; returns true for valid HTTPS URLs with IP" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidURLFormat &gt; returns true for valid IPFS URLs" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidURLFormat &gt; returns false for invalid URLs" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidURLFormat &gt; returns false for invalid URLs without domain" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidURLFormat &gt; returns false for strings that are not URLs" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidURLFormat &gt; returns false for empty string" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidHashFormat &gt; returns true for valid hexadecimal strings" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidHashFormat &gt; returns false for non-hexadecimal strings" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidHashFormat &gt; returns false for hexadecimal strings with spaces" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isValidHashFormat &gt; returns false for empty string" time="0">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isRewardAddress &gt; returns true for stake address" time="0.005">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isRewardAddress &gt; returns error for empty string" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/isValidFormat.test.ts" name="isRewardAddress &gt; returns error for another bech32 string" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/removeDuplicatedProposals.test.ts" timestamp="2024-08-30T09:05:02.904Z" hostname="MacBook-Pro-Micha.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="src/utils/tests/removeDuplicatedProposals.test.ts" name="remove duplicated proposals &gt; returns all proposals when all are unique" time="0.002">
        </testcase>
        <testcase classname="src/utils/tests/removeDuplicatedProposals.test.ts" name="remove duplicated proposals &gt; removes duplicate proposals based on txHash and index" time="0">
        </testcase>
        <testcase classname="src/utils/tests/removeDuplicatedProposals.test.ts" name="remove duplicated proposals &gt; returns empty array if input is empty" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/canonizeJSON.test.ts" timestamp="2024-08-30T09:05:02.904Z" hostname="MacBook-Pro-Micha.local" tests="1" failures="0" errors="0" skipped="0" time="0.007">
        <testcase classname="src/utils/tests/canonizeJSON.test.ts" name="canonizeJSON &gt; should correctly canonize a jsonld object to the expected output" time="0.007">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/adaFormat.test.ts" timestamp="2024-08-30T09:05:02.904Z" hostname="MacBook-Pro-Micha.local" tests="8" failures="0" errors="0" skipped="0" time="0.007">
        <testcase classname="src/utils/tests/adaFormat.test.ts" name="correctAdaFormat &gt; converts lovelace to ADA for a given number" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/adaFormat.test.ts" name="correctAdaFormat &gt; returns 0 for undefined lovelace value" time="0">
        </testcase>
        <testcase classname="src/utils/tests/adaFormat.test.ts" name="correctAdaFormat &gt; handles large lovelace values correctly" time="0">
        </testcase>
        <testcase classname="src/utils/tests/adaFormat.test.ts" name="correctAdaFormat &gt; handles small lovelace values with correct rounding" time="0">
        </testcase>
        <testcase classname="src/utils/tests/adaFormat.test.ts" name="correctAdaFormat &gt; returns 0 for zero lovelace value" time="0">
        </testcase>
        <testcase classname="src/utils/tests/adaFormat.test.ts" name="correctDRepDirectoryFormat &gt; Correctly formats lovelace value to directory format" time="0.006">
        </testcase>
        <testcase classname="src/utils/tests/adaFormat.test.ts" name="correctDRepDirectoryFormat &gt; Returns 0 for numbers smaller than one million" time="0">
        </testcase>
        <testcase classname="src/utils/tests/adaFormat.test.ts" name="correctDRepDirectoryFormat &gt; Returns result without comma" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/testIdFromLabel.test.ts" timestamp="2024-08-30T09:05:02.905Z" hostname="MacBook-Pro-Micha.local" tests="6" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="src/utils/tests/testIdFromLabel.test.ts" name="testIdFromLabel function &gt; replaces spaces with dashes and converts the label to lowercase" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/testIdFromLabel.test.ts" name="testIdFromLabel function &gt; handles labels with multiple spaces" time="0">
        </testcase>
        <testcase classname="src/utils/tests/testIdFromLabel.test.ts" name="testIdFromLabel function &gt; handles labels with leading and trailing spaces" time="0">
        </testcase>
        <testcase classname="src/utils/tests/testIdFromLabel.test.ts" name="testIdFromLabel function &gt; handles labels with special characters" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/testIdFromLabel.test.ts" name="testIdFromLabel function &gt; handles empty labels" time="0">
        </testcase>
        <testcase classname="src/utils/tests/testIdFromLabel.test.ts" name="testIdFromLabel function &gt; handles labels with all spaces" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/checkIsMaintenanceOn.test.ts" timestamp="2024-08-30T09:05:02.906Z" hostname="MacBook-Pro-Micha.local" tests="4" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="src/utils/tests/checkIsMaintenanceOn.test.ts" name="checkIsMaintenanceOn function &gt; does nothing in development mode" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/checkIsMaintenanceOn.test.ts" name="checkIsMaintenanceOn function &gt; reloads the page if maintenance mode is active" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/checkIsMaintenanceOn.test.ts" name="checkIsMaintenanceOn function &gt; does not reload the page if maintenance mode is not active" time="0">
        </testcase>
        <testcase classname="src/utils/tests/checkIsMaintenanceOn.test.ts" name="checkIsMaintenanceOn function &gt; throws an error if the request fails" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/getGovActionId.test.ts" timestamp="2024-08-30T09:05:02.906Z" hostname="MacBook-Pro-Micha.local" tests="5" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="src/utils/tests/getGovActionId.test.ts" name="getShortenedGovActionId &gt; should return the correct shortened id for long hashes" time="0">
        </testcase>
        <testcase classname="src/utils/tests/getGovActionId.test.ts" name="getShortenedGovActionId &gt; should handle hashes shorter than 6 characters correctly" time="0">
        </testcase>
        <testcase classname="src/utils/tests/getGovActionId.test.ts" name="getShortenedGovActionId &gt; should handle hashes exactly 6 characters long by not shortening" time="0">
        </testcase>
        <testcase classname="src/utils/tests/getGovActionId.test.ts" name="getShortenedGovActionId &gt; should handle an empty string for txHash correctly" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/getGovActionId.test.ts" name="getFullGovActionId &gt; should return the full id with index" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/jsonUtils.test.ts" timestamp="2024-08-30T09:05:02.907Z" hostname="MacBook-Pro-Micha.local" tests="2" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="src/utils/tests/jsonUtils.test.ts" name="downloadJson &gt; downloads JSON with default file name" time="0.002">
        </testcase>
        <testcase classname="src/utils/tests/jsonUtils.test.ts" name="downloadJson &gt; downloads JSON with custom file name" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/dRep.test.ts" timestamp="2024-08-30T09:05:02.907Z" hostname="MacBook-Pro-Micha.local" tests="4" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="src/utils/tests/dRep.test.ts" name="isSameDRep function &gt; returns false if dRepIdOrView is undefined" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/dRep.test.ts" name="isSameDRep function &gt; returns true if drepId matches dRepIdOrView" time="0">
        </testcase>
        <testcase classname="src/utils/tests/dRep.test.ts" name="isSameDRep function &gt; returns true if view matches dRepIdOrView" time="0">
        </testcase>
        <testcase classname="src/utils/tests/dRep.test.ts" name="isSameDRep function &gt; returns false if neither drepId nor view matches dRepIdOrView" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/numberValidation.test.ts" timestamp="2024-08-30T09:05:02.907Z" hostname="MacBook-Pro-Micha.local" tests="3" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="src/utils/tests/numberValidation.test.ts" name="numberValidation function &gt; returns an error message when the input is not a valid number" time="0.002">
        </testcase>
        <testcase classname="src/utils/tests/numberValidation.test.ts" name="numberValidation function &gt; returns an error message when the input is negative" time="0">
        </testcase>
        <testcase classname="src/utils/tests/numberValidation.test.ts" name="numberValidation function &gt; returns true when the input is a valid positive number" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/areObjectsTheSame.test.ts" timestamp="2024-08-30T09:05:02.907Z" hostname="MacBook-Pro-Micha.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="src/utils/tests/areObjectsTheSame.test.ts" name="areObjectsTheSame &gt; should return false when objects have different lengths" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/areObjectsTheSame.test.ts" name="areObjectsTheSame &gt; should return false when objects have different properties" time="0">
        </testcase>
        <testcase classname="src/utils/tests/areObjectsTheSame.test.ts" name="areObjectsTheSame &gt; should return true when objects are the same" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/getProposalTypeNoEmptySpaces.test.ts" timestamp="2024-08-30T09:05:02.908Z" hostname="MacBook-Pro-Micha.local" tests="4" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="src/utils/tests/getProposalTypeNoEmptySpaces.test.ts" name="getProposalTypeNoEmptySpaces &gt; returns correct label with no spaces for a known type" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/getProposalTypeNoEmptySpaces.test.ts" name="getProposalTypeNoEmptySpaces &gt; returns correct label with no spaces for another known type" time="0">
        </testcase>
        <testcase classname="src/utils/tests/getProposalTypeNoEmptySpaces.test.ts" name="getProposalTypeNoEmptySpaces &gt; returns the type itself with no spaces removed when no matching key is found" time="0">
        </testcase>
        <testcase classname="src/utils/tests/getProposalTypeNoEmptySpaces.test.ts" name="getProposalTypeNoEmptySpaces &gt; returns an empty string when given an empty string" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/generateAnchor.test.ts" timestamp="2024-08-30T09:05:02.908Z" hostname="MacBook-Pro-Micha.local" tests="1" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="src/utils/tests/generateAnchor.test.ts" name="generateAnchor function &gt; generates an anchor with the provided URL and hash" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/openInNewTab.test.ts" timestamp="2024-08-30T09:05:02.908Z" hostname="MacBook-Pro-Micha.local" tests="2" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="src/utils/tests/openInNewTab.test.ts" name="openInNewTab function &gt; opens a new tab with the provided URL" time="0.002">
        </testcase>
        <testcase classname="src/utils/tests/openInNewTab.test.ts" name="openInNewTab function &gt; sets opener to null if new window is opened" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/checkIsWalletConnected.test.ts" timestamp="2024-08-30T09:05:02.908Z" hostname="MacBook-Pro-Micha.local" tests="2" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="src/utils/tests/checkIsWalletConnected.test.ts" name="checkIsWalletConnected function &gt; returns true when wallet information is present in local storage" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/checkIsWalletConnected.test.ts" name="checkIsWalletConnected function &gt; returns false when wallet information is missing in local storage" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/getProposalTypeLabel.test.ts" timestamp="2024-08-30T09:05:02.908Z" hostname="MacBook-Pro-Micha.local" tests="4" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="src/utils/tests/getProposalTypeLabel.test.ts" name="getProposalTypeLabel &gt; returns correct label for a known type" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/getProposalTypeLabel.test.ts" name="getProposalTypeLabel &gt; returns correct label for another known type" time="0">
        </testcase>
        <testcase classname="src/utils/tests/getProposalTypeLabel.test.ts" name="getProposalTypeLabel &gt; returns the type itself when no matching key is found" time="0">
        </testcase>
        <testcase classname="src/utils/tests/getProposalTypeLabel.test.ts" name="getProposalTypeLabel &gt; returns the type itself when given an empty string" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/callAll.test.ts" timestamp="2024-08-30T09:05:02.909Z" hostname="MacBook-Pro-Micha.local" tests="2" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="src/utils/tests/callAll.test.ts" name="callAll &gt; should call all functions with provided arguments" time="0.002">
        </testcase>
        <testcase classname="src/utils/tests/callAll.test.ts" name="callAll &gt; should not throw an error if any function is undefined" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/wait.test.ts" timestamp="2024-08-30T09:05:02.909Z" hostname="MacBook-Pro-Micha.local" tests="2" failures="0" errors="0" skipped="0" time="7.005">
        <testcase classname="src/utils/tests/wait.test.ts" name="wait function &gt; resolves after the specified time" time="2.003">
        </testcase>
        <testcase classname="src/utils/tests/wait.test.ts" name="wait function &gt; resolves after the default time if no time is specified" time="5.002">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/localStorage.test.ts" timestamp="2024-08-30T09:05:02.909Z" hostname="MacBook-Pro-Micha.local" tests="2" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="src/utils/tests/localStorage.test.ts" name="localStorage util &gt; returns correctly value after set item to localstorage" time="0.002">
        </testcase>
        <testcase classname="src/utils/tests/localStorage.test.ts" name="localStorage util &gt; returns null after remove item from localstorage" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/formatDate.test.ts" timestamp="2024-08-30T09:05:02.910Z" hostname="MacBook-Pro-Micha.local" tests="3" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="src/utils/tests/formatDate.test.ts" name="formatDisplayDate &gt; formats a date object correctly" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/formatDate.test.ts" name="formatDisplayDate &gt; formats a date string correctly" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/formatDate.test.ts" name="formatDisplayDate &gt; handles custom format strings" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/getLengthInBytes.test.ts" timestamp="2024-08-30T09:05:02.910Z" hostname="MacBook-Pro-Micha.local" tests="4" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="src/utils/tests/getLengthInBytes.test.ts" name="getLengthInBytes &gt; returns correct byte length for ASCII characters" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/getLengthInBytes.test.ts" name="getLengthInBytes &gt; returns correct byte length for multibyte characters" time="0">
        </testcase>
        <testcase classname="src/utils/tests/getLengthInBytes.test.ts" name="getLengthInBytes &gt; returns correct byte length for mixed characters" time="0">
        </testcase>
        <testcase classname="src/utils/tests/getLengthInBytes.test.ts" name="getLengthInBytes &gt; returns 0 for an empty string" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/bech32Validation.test.ts" timestamp="2024-08-30T09:05:02.911Z" hostname="MacBook-Pro-Micha.local" tests="2" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="src/utils/tests/bech32Validation.test.ts" name="bech32 validation &gt; should return true for valid bech32 value" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/bech32Validation.test.ts" name="bech32 validation &gt; should return an error message for invalid bech32 value" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/generateMetadataBody.test.ts" timestamp="2024-08-30T09:05:02.911Z" hostname="MacBook-Pro-Micha.local" tests="3" failures="0" errors="0" skipped="0" time="0.001">
        <testcase classname="src/utils/tests/generateMetadataBody.test.ts" name="generateMetadataBody &gt; generates metadata body with filtered data" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/generateMetadataBody.test.ts" name="generateMetadataBody &gt; generates metadata body with filtered data and references" time="0">
        </testcase>
        <testcase classname="src/utils/tests/generateMetadataBody.test.ts" name="generateMetadataBody &gt; generates metadata body with empty data" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/getMetadataDataMissingStatusTranslation.test.ts" timestamp="2024-08-30T09:05:02.911Z" hostname="MacBook-Pro-Micha.local" tests="4" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="src/utils/tests/getMetadataDataMissingStatusTranslation.test.ts" name="getMetadataDataMissingStatusTranslation &gt; should return the correct translation for URL_NOT_FOUND status" time="0.002">
        </testcase>
        <testcase classname="src/utils/tests/getMetadataDataMissingStatusTranslation.test.ts" name="getMetadataDataMissingStatusTranslation &gt; should return the correct translation for INVALID_JSONLD status" time="0">
        </testcase>
        <testcase classname="src/utils/tests/getMetadataDataMissingStatusTranslation.test.ts" name="getMetadataDataMissingStatusTranslation &gt; should return the correct translation for INVALID_HASH status" time="0">
        </testcase>
        <testcase classname="src/utils/tests/getMetadataDataMissingStatusTranslation.test.ts" name="getMetadataDataMissingStatusTranslation &gt; should return the default translation for unknown status" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/filterOutNullParams.test.ts" timestamp="2024-08-30T09:05:02.912Z" hostname="MacBook-Pro-Micha.local" tests="5" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="src/utils/tests/filterOutNullParams.test.ts" name="filterOutNullParams &gt; should filter out null parameters" time="0">
        </testcase>
        <testcase classname="src/utils/tests/filterOutNullParams.test.ts" name="filterOutNullParams &gt; should exclude keys from filtering process" time="0">
        </testcase>
        <testcase classname="src/utils/tests/filterOutNullParams.test.ts" name="filterOutNullParams &gt; should return null if originalObject is null" time="0">
        </testcase>
        <testcase classname="src/utils/tests/filterOutNullParams.test.ts" name="filterOutNullParams &gt; should return null if originalObject is undefined" time="0">
        </testcase>
        <testcase classname="src/utils/tests/filterOutNullParams.test.ts" name="filterOutNullParams &gt; shouldn&apos;t filter out 0" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tests/filterUpdatableProtocolParams.test.ts" timestamp="2024-08-30T09:05:02.912Z" hostname="MacBook-Pro-Micha.local" tests="5" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="src/utils/tests/filterUpdatableProtocolParams.test.ts" name="filterUpdatableProtocolParams &gt; should return only existing in reference object properties" time="0.001">
        </testcase>
        <testcase classname="src/utils/tests/filterUpdatableProtocolParams.test.ts" name="filterUpdatableProtocolParams &gt; should return only existing in reference object properties and filter out keys" time="0">
        </testcase>
        <testcase classname="src/utils/tests/filterUpdatableProtocolParams.test.ts" name="filterUpdatableProtocolParams &gt; should not filter out 0 value from the reference object" time="0">
        </testcase>
        <testcase classname="src/utils/tests/filterUpdatableProtocolParams.test.ts" name="filterUpdatableProtocolParams &gt; should return null if original object is not provided" time="0">
        </testcase>
        <testcase classname="src/utils/tests/filterUpdatableProtocolParams.test.ts" name="filterUpdatableProtocolParams &gt; should return null if update object is not provided" time="0">
        </testcase>
    </testsuite>
</testsuites>
